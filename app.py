import streamlit as st
import os
import shutil

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
BASE_DIR = "file_storage"
CATEGORIES = {
    "modrinth": {"name": "Modrinth Packs (.mrpack)", "path": os.path.join(BASE_DIR, "modrinth_packs"), "icon": "üì¶"},
    "curseforge": {"name": "CurseForge Packs (.zip)", "path": os.path.join(BASE_DIR, "curseforge_packs"), "icon": "üî•"},
    "other": {"name": "‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "path": os.path.join(BASE_DIR, "other_files"), "icon": "üóÇÔ∏è"}
}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
for category in CATEGORIES.values():
    os.makedirs(category["path"], exist_ok=True)


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå ---

def display_files_in_category(category_key, is_admin=False):
    """‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    category = CATEGORIES[category_key]
    st.header(f"{category['icon']} {category['name']}")

    try:
        files = sorted(os.listdir(category['path']))
        if not files:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ")
            return

        for filename in files:
            file_path = os.path.join(category['path'], filename)
            if os.path.isfile(file_path):
                file_size = os.path.getsize(file_path) / (1024 * 1024)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô MB

                with open(file_path, "rb") as f:
                    file_bytes = f.read()

                cols = st.columns([0.5, 0.3, 0.2]) if is_admin else st.columns([0.7, 0.3])

                with cols[0]:
                    st.markdown(f"**{filename}**")
                    st.caption(f"‡∏Ç‡∏ô‡∏≤‡∏î: {file_size:.2f} MB")

                with cols[1]:
                    st.download_button(
                        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                        data=file_bytes,
                        file_name=filename,
                        mime="application/octet-stream",
                        key=f"dl_{category_key}_{filename}"
                    )

                if is_admin:
                    with cols[2]:
                        if st.button("üóëÔ∏è ‡∏•‡∏ö", key=f"del_{category_key}_{filename}", type="primary"):
                            # ‡πÉ‡∏ä‡πâ session_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                            st.session_state.file_to_delete = {"path": file_path, "name": filename}
                            st.rerun()

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå: {e}")


# --- ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏´‡∏•‡∏±‡∏Å ---
st.set_page_config(page_title="Minecraft Pack Hub", page_icon="‚õèÔ∏è", layout="wide")

st.title("‚õèÔ∏è Minecraft Pack & File Hub")
st.markdown("‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Modpacks ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")

# --- ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ Admin ---
if 'is_admin' not in st.session_state:
    st.session_state.is_admin = False

with st.sidebar:
    st.header("üîê ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")
    if not st.session_state.is_admin:
        password = st.text_input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
        if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
            # ‡πÉ‡∏ä‡πâ st.secrets ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
            try:
                correct_password = st.secrets["ADMIN_PASSWORD"]
            except FileNotFoundError:
                # Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (Local)
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö Secrets, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)")
                correct_password = "admin123"

            if password == correct_password:
                st.session_state.is_admin = True
                st.rerun()
            else:
                st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    if st.session_state.is_admin:
        st.success("‚úîÔ∏è ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")

        st.header("‚öôÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")

        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
        with st.expander("‚¨ÜÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà", expanded=True):
            category_options = {key: cat["name"] for key, cat in CATEGORIES.items()}
            chosen_category_key = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ:", options=list(category_options.keys()),
                                               format_func=lambda key: category_options[key])

            uploaded_files = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", accept_multiple_files=True, key="uploader")

            if st.button("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"):
                if uploaded_files and chosen_category_key:
                    save_path_dir = CATEGORIES[chosen_category_key]['path']
                    success_count = 0
                    for uploaded_file in uploaded_files:
                        with open(os.path.join(save_path_dir, uploaded_file.name), "wb") as f:
                            f.write(uploaded_file.getbuffer())
                        success_count += 1
                    st.success(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î {success_count} ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á '{category_options[chosen_category_key]}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á rerun ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ uploader ‡∏à‡∏∞ trigger rerun ‡πÄ‡∏≠‡∏á
                else:
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")

        if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"):
            st.session_state.is_admin = False
            # ‡∏•‡πâ‡∏≤‡∏á state ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if 'file_to_delete' in st.session_state:
                del st.session_state.file_to_delete
            st.rerun()

# --- ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå (Modal-like behavior) ---
if 'file_to_delete' in st.session_state and st.session_state.file_to_delete:
    file_info = st.session_state.file_to_delete
    with st.container():
        st.warning(f"‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: **{file_info['name']}** ?")
        col1, col2, col3 = st.columns([1, 1, 4])
        with col1:
            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", type="primary"):
                try:
                    os.remove(file_info['path'])
                    st.success(f"‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå '{file_info['name']}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    del st.session_state.file_to_delete
                    st.rerun()
                except Exception as e:
                    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
        with col2:
            if st.button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"):
                del st.session_state.file_to_delete
                st.rerun()

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å ---
tab1, tab2, tab3 = st.tabs([f"{cat['icon']} {cat['name']}" for cat in CATEGORIES.values()])

with tab1:
    display_files_in_category("modrinth", st.session_state.is_admin)

with tab2:
    display_files_in_category("curseforge", st.session_state.is_admin)

with tab3:
    display_files_in_category("other", st.session_state.is_admin)